Grammar

    0 $accept: program $end

    1 program: statement ';' program
    2        | /* empty */
    3        | ';' program

    4 declaration: datatype VARIABLE
    5            | datatype VARIABLE '=' assignmentValue
    6            | CONST datatype VARIABLE '=' assignmentValue
    7            | datatype VARIABLE '=' VARIABLE '(' parameters ')'
    8            | CONST datatype VARIABLE '=' VARIABLE '(' parameters ')'

    9 assignment: VARIABLE '=' assignmentValue
   10           | VARIABLE '=' VARIABLE '(' parameters ')'

   11 assignmentValue: expression
   12                | CHAR
   13                | CHARARRAY

   14 initialization: declaration
   15               | assignment

   16 statement: initialization
   17          | WHILE '(' expression ')' scope
   18          | REPEAT scope UNTIL '(' expression ')'
   19          | FOR '(' initialization ';' expression ';' assignment ')' scope
   20          | SWITCH '(' expression ')' '{' case '}'
   21          | scope
   22          | IF '(' expression ')' THEN scope
   23          | IF '(' expression ')' THEN scope ELSE scope
   24          | FUNCTION datatype VARIABLE '(' arguments ')' funcScopeValue
   25          | FUNCTION VOID VARIABLE '(' arguments ')' funcScopeVoid
   26          | VARIABLE '(' parameters ')'

   27 argumentsList: datatype VARIABLE
   28              | datatype VARIABLE ',' argumentsList

   29 arguments: argumentsList
   30          | /* empty */

   31 parametersList: assignmentValue ',' parametersList
   32               | assignmentValue

   33 parameters: parametersList
   34           | /* empty */

   35 case: CASE expression ':' scope
   36     | CASE expression ':' scope case

   37 expression: INTEGER
   38           | FLOATING
   39           | BOOLEAN
   40           | VARIABLE
   41           | expression '<' expression
   42           | expression '>' expression
   43           | expression LE expression
   44           | expression GE expression
   45           | expression EQ expression
   46           | expression NE expression
   47           | expression '|' expression
   48           | expression '&' expression
   49           | expression '+' expression
   50           | expression '-' expression
   51           | expression '*' expression
   52           | expression '/' expression
   53           | '~' expression
   54           | '-' expression
   55           | '(' expression ')'

   56 datatype: INT
   57         | FLOAT
   58         | BOOL
   59         | CHARACTER
   60         | STRING

   61 scope: '{' program '}'

   62 funcScopeValue: '{' program returnValue program '}'

   63 funcScopeVoid: '{' program returnVoid program '}'
   64              | scope

   65 returnValue: RETURN expression ';'

   66 returnVoid: RETURN ';'


Terminals, with rules where they appear

$end (0) 0
'&' (38) 48
'(' (40) 7 8 10 17 18 19 20 22 23 24 25 26 55
')' (41) 7 8 10 17 18 19 20 22 23 24 25 26 55
'*' (42) 51
'+' (43) 49
',' (44) 28 31
'-' (45) 50 54
'/' (47) 52
':' (58) 35 36
';' (59) 1 3 19 65 66
'<' (60) 41
'=' (61) 5 6 7 8 9 10
'>' (62) 42
'{' (123) 20 61 62 63
'|' (124) 47
'}' (125) 20 61 62 63
'~' (126) 53
error (256)
INTEGER (258) 37
FLOATING (259) 38
BOOLEAN (260) 39
CHAR (261) 12
CHARARRAY (262) 13
VARIABLE (263) 4 5 6 7 8 9 10 24 25 26 27 28 40
WHILE (264) 17
REPEAT (265) 18
UNTIL (266) 18
FOR (267) 19
SWITCH (268) 20
CASE (269) 35 36
IF (270) 22 23
THEN (271) 22 23
ELSE (272) 23
FUNCTION (273) 24 25
RETURN (274) 65 66
INT (275) 56
FLOAT (276) 57
CHARACTER (277) 59
STRING (278) 60
BOOL (279) 58
VOID (280) 25
CONST (281) 6 8
GE (282) 44
LE (283) 43
EQ (284) 45
NE (285) 46


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1 2 3, on right: 0 1 3 61 62 63
declaration (50)
    on left: 4 5 6 7 8, on right: 14
assignment (51)
    on left: 9 10, on right: 15 19
assignmentValue (52)
    on left: 11 12 13, on right: 5 6 9 31 32
initialization (53)
    on left: 14 15, on right: 16 19
statement (54)
    on left: 16 17 18 19 20 21 22 23 24 25 26, on right: 1
argumentsList (55)
    on left: 27 28, on right: 28 29
arguments (56)
    on left: 29 30, on right: 24 25
parametersList (57)
    on left: 31 32, on right: 31 33
parameters (58)
    on left: 33 34, on right: 7 8 10 26
case (59)
    on left: 35 36, on right: 20 36
expression (60)
    on left: 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54
    55, on right: 11 17 18 19 20 22 23 35 36 41 42 43 44 45 46 47 48
    49 50 51 52 53 54 55 65
datatype (61)
    on left: 56 57 58 59 60, on right: 4 5 6 7 8 24 27 28
scope (62)
    on left: 61, on right: 17 18 19 21 22 23 35 36 64
funcScopeValue (63)
    on left: 62, on right: 24
funcScopeVoid (64)
    on left: 63 64, on right: 25
returnValue (65)
    on left: 65, on right: 62
returnVoid (66)
    on left: 66, on right: 63


state 0

    0 $accept: . program $end

    VARIABLE   shift, and go to state 1
    WHILE      shift, and go to state 2
    REPEAT     shift, and go to state 3
    FOR        shift, and go to state 4
    SWITCH     shift, and go to state 5
    IF         shift, and go to state 6
    FUNCTION   shift, and go to state 7
    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12
    CONST      shift, and go to state 13
    ';'        shift, and go to state 14
    '{'        shift, and go to state 15

    $default  reduce using rule 2 (program)

    program         go to state 16
    declaration     go to state 17
    assignment      go to state 18
    initialization  go to state 19
    statement       go to state 20
    datatype        go to state 21
    scope           go to state 22


state 1

    9 assignment: VARIABLE . '=' assignmentValue
   10           | VARIABLE . '=' VARIABLE '(' parameters ')'
   26 statement: VARIABLE . '(' parameters ')'

    '='  shift, and go to state 23
    '('  shift, and go to state 24


state 2

   17 statement: WHILE . '(' expression ')' scope

    '('  shift, and go to state 25


state 3

   18 statement: REPEAT . scope UNTIL '(' expression ')'

    '{'  shift, and go to state 15

    scope  go to state 26


state 4

   19 statement: FOR . '(' initialization ';' expression ';' assignment ')' scope

    '('  shift, and go to state 27


state 5

   20 statement: SWITCH . '(' expression ')' '{' case '}'

    '('  shift, and go to state 28


state 6

   22 statement: IF . '(' expression ')' THEN scope
   23          | IF . '(' expression ')' THEN scope ELSE scope

    '('  shift, and go to state 29


state 7

   24 statement: FUNCTION . datatype VARIABLE '(' arguments ')' funcScopeValue
   25          | FUNCTION . VOID VARIABLE '(' arguments ')' funcScopeVoid

    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12
    VOID       shift, and go to state 30

    datatype  go to state 31


state 8

   56 datatype: INT .

    $default  reduce using rule 56 (datatype)


state 9

   57 datatype: FLOAT .

    $default  reduce using rule 57 (datatype)


state 10

   59 datatype: CHARACTER .

    $default  reduce using rule 59 (datatype)


state 11

   60 datatype: STRING .

    $default  reduce using rule 60 (datatype)


state 12

   58 datatype: BOOL .

    $default  reduce using rule 58 (datatype)


state 13

    6 declaration: CONST . datatype VARIABLE '=' assignmentValue
    8            | CONST . datatype VARIABLE '=' VARIABLE '(' parameters ')'

    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12

    datatype  go to state 32


state 14

    3 program: ';' . program

    VARIABLE   shift, and go to state 1
    WHILE      shift, and go to state 2
    REPEAT     shift, and go to state 3
    FOR        shift, and go to state 4
    SWITCH     shift, and go to state 5
    IF         shift, and go to state 6
    FUNCTION   shift, and go to state 7
    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12
    CONST      shift, and go to state 13
    ';'        shift, and go to state 14
    '{'        shift, and go to state 15

    $default  reduce using rule 2 (program)

    program         go to state 33
    declaration     go to state 17
    assignment      go to state 18
    initialization  go to state 19
    statement       go to state 20
    datatype        go to state 21
    scope           go to state 22


state 15

   61 scope: '{' . program '}'

    VARIABLE   shift, and go to state 1
    WHILE      shift, and go to state 2
    REPEAT     shift, and go to state 3
    FOR        shift, and go to state 4
    SWITCH     shift, and go to state 5
    IF         shift, and go to state 6
    FUNCTION   shift, and go to state 7
    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12
    CONST      shift, and go to state 13
    ';'        shift, and go to state 14
    '{'        shift, and go to state 15

    $default  reduce using rule 2 (program)

    program         go to state 34
    declaration     go to state 17
    assignment      go to state 18
    initialization  go to state 19
    statement       go to state 20
    datatype        go to state 21
    scope           go to state 22


state 16

    0 $accept: program . $end

    $end  shift, and go to state 35


state 17

   14 initialization: declaration .

    $default  reduce using rule 14 (initialization)


state 18

   15 initialization: assignment .

    $default  reduce using rule 15 (initialization)


state 19

   16 statement: initialization .

    $default  reduce using rule 16 (statement)


state 20

    1 program: statement . ';' program

    ';'  shift, and go to state 36


state 21

    4 declaration: datatype . VARIABLE
    5            | datatype . VARIABLE '=' assignmentValue
    7            | datatype . VARIABLE '=' VARIABLE '(' parameters ')'

    VARIABLE  shift, and go to state 37


state 22

   21 statement: scope .

    $default  reduce using rule 21 (statement)


state 23

    9 assignment: VARIABLE '=' . assignmentValue
   10           | VARIABLE '=' . VARIABLE '(' parameters ')'

    INTEGER    shift, and go to state 38
    FLOATING   shift, and go to state 39
    BOOLEAN    shift, and go to state 40
    CHAR       shift, and go to state 41
    CHARARRAY  shift, and go to state 42
    VARIABLE   shift, and go to state 43
    '-'        shift, and go to state 44
    '~'        shift, and go to state 45
    '('        shift, and go to state 46

    assignmentValue  go to state 47
    expression       go to state 48


state 24

   26 statement: VARIABLE '(' . parameters ')'

    INTEGER    shift, and go to state 38
    FLOATING   shift, and go to state 39
    BOOLEAN    shift, and go to state 40
    CHAR       shift, and go to state 41
    CHARARRAY  shift, and go to state 42
    VARIABLE   shift, and go to state 49
    '-'        shift, and go to state 44
    '~'        shift, and go to state 45
    '('        shift, and go to state 46

    $default  reduce using rule 34 (parameters)

    assignmentValue  go to state 50
    parametersList   go to state 51
    parameters       go to state 52
    expression       go to state 48


state 25

   17 statement: WHILE '(' . expression ')' scope

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 53


state 26

   18 statement: REPEAT scope . UNTIL '(' expression ')'

    UNTIL  shift, and go to state 54


state 27

   19 statement: FOR '(' . initialization ';' expression ';' assignment ')' scope

    VARIABLE   shift, and go to state 55
    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12
    CONST      shift, and go to state 13

    declaration     go to state 17
    assignment      go to state 18
    initialization  go to state 56
    datatype        go to state 21


state 28

   20 statement: SWITCH '(' . expression ')' '{' case '}'

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 57


state 29

   22 statement: IF '(' . expression ')' THEN scope
   23          | IF '(' . expression ')' THEN scope ELSE scope

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 58


state 30

   25 statement: FUNCTION VOID . VARIABLE '(' arguments ')' funcScopeVoid

    VARIABLE  shift, and go to state 59


state 31

   24 statement: FUNCTION datatype . VARIABLE '(' arguments ')' funcScopeValue

    VARIABLE  shift, and go to state 60


state 32

    6 declaration: CONST datatype . VARIABLE '=' assignmentValue
    8            | CONST datatype . VARIABLE '=' VARIABLE '(' parameters ')'

    VARIABLE  shift, and go to state 61


state 33

    3 program: ';' program .

    $default  reduce using rule 3 (program)


state 34

   61 scope: '{' program . '}'

    '}'  shift, and go to state 62


state 35

    0 $accept: program $end .

    $default  accept


state 36

    1 program: statement ';' . program

    VARIABLE   shift, and go to state 1
    WHILE      shift, and go to state 2
    REPEAT     shift, and go to state 3
    FOR        shift, and go to state 4
    SWITCH     shift, and go to state 5
    IF         shift, and go to state 6
    FUNCTION   shift, and go to state 7
    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12
    CONST      shift, and go to state 13
    ';'        shift, and go to state 14
    '{'        shift, and go to state 15

    $default  reduce using rule 2 (program)

    program         go to state 63
    declaration     go to state 17
    assignment      go to state 18
    initialization  go to state 19
    statement       go to state 20
    datatype        go to state 21
    scope           go to state 22


state 37

    4 declaration: datatype VARIABLE .
    5            | datatype VARIABLE . '=' assignmentValue
    7            | datatype VARIABLE . '=' VARIABLE '(' parameters ')'

    '='  shift, and go to state 64

    $default  reduce using rule 4 (declaration)


state 38

   37 expression: INTEGER .

    $default  reduce using rule 37 (expression)


state 39

   38 expression: FLOATING .

    $default  reduce using rule 38 (expression)


state 40

   39 expression: BOOLEAN .

    $default  reduce using rule 39 (expression)


state 41

   12 assignmentValue: CHAR .

    $default  reduce using rule 12 (assignmentValue)


state 42

   13 assignmentValue: CHARARRAY .

    $default  reduce using rule 13 (assignmentValue)


state 43

   10 assignment: VARIABLE '=' VARIABLE . '(' parameters ')'
   40 expression: VARIABLE .

    '('  shift, and go to state 65

    $default  reduce using rule 40 (expression)


state 44

   54 expression: '-' . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 66


state 45

   53 expression: '~' . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 67


state 46

   55 expression: '(' . expression ')'

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 68


state 47

    9 assignment: VARIABLE '=' assignmentValue .

    $default  reduce using rule 9 (assignment)


state 48

   11 assignmentValue: expression .
   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    GE   shift, and go to state 69
    LE   shift, and go to state 70
    EQ   shift, and go to state 71
    NE   shift, and go to state 72
    '|'  shift, and go to state 73
    '&'  shift, and go to state 74
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 11 (assignmentValue)


state 49

   40 expression: VARIABLE .

    $default  reduce using rule 40 (expression)


state 50

   31 parametersList: assignmentValue . ',' parametersList
   32               | assignmentValue .

    ','  shift, and go to state 81

    $default  reduce using rule 32 (parametersList)


state 51

   33 parameters: parametersList .

    $default  reduce using rule 33 (parameters)


state 52

   26 statement: VARIABLE '(' parameters . ')'

    ')'  shift, and go to state 82


state 53

   17 statement: WHILE '(' expression . ')' scope
   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    GE   shift, and go to state 69
    LE   shift, and go to state 70
    EQ   shift, and go to state 71
    NE   shift, and go to state 72
    '|'  shift, and go to state 73
    '&'  shift, and go to state 74
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    ')'  shift, and go to state 83


state 54

   18 statement: REPEAT scope UNTIL . '(' expression ')'

    '('  shift, and go to state 84


state 55

    9 assignment: VARIABLE . '=' assignmentValue
   10           | VARIABLE . '=' VARIABLE '(' parameters ')'

    '='  shift, and go to state 23


state 56

   19 statement: FOR '(' initialization . ';' expression ';' assignment ')' scope

    ';'  shift, and go to state 85


state 57

   20 statement: SWITCH '(' expression . ')' '{' case '}'
   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    GE   shift, and go to state 69
    LE   shift, and go to state 70
    EQ   shift, and go to state 71
    NE   shift, and go to state 72
    '|'  shift, and go to state 73
    '&'  shift, and go to state 74
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    ')'  shift, and go to state 86


state 58

   22 statement: IF '(' expression . ')' THEN scope
   23          | IF '(' expression . ')' THEN scope ELSE scope
   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    GE   shift, and go to state 69
    LE   shift, and go to state 70
    EQ   shift, and go to state 71
    NE   shift, and go to state 72
    '|'  shift, and go to state 73
    '&'  shift, and go to state 74
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    ')'  shift, and go to state 87


state 59

   25 statement: FUNCTION VOID VARIABLE . '(' arguments ')' funcScopeVoid

    '('  shift, and go to state 88


state 60

   24 statement: FUNCTION datatype VARIABLE . '(' arguments ')' funcScopeValue

    '('  shift, and go to state 89


state 61

    6 declaration: CONST datatype VARIABLE . '=' assignmentValue
    8            | CONST datatype VARIABLE . '=' VARIABLE '(' parameters ')'

    '='  shift, and go to state 90


state 62

   61 scope: '{' program '}' .

    $default  reduce using rule 61 (scope)


state 63

    1 program: statement ';' program .

    $default  reduce using rule 1 (program)


state 64

    5 declaration: datatype VARIABLE '=' . assignmentValue
    7            | datatype VARIABLE '=' . VARIABLE '(' parameters ')'

    INTEGER    shift, and go to state 38
    FLOATING   shift, and go to state 39
    BOOLEAN    shift, and go to state 40
    CHAR       shift, and go to state 41
    CHARARRAY  shift, and go to state 42
    VARIABLE   shift, and go to state 91
    '-'        shift, and go to state 44
    '~'        shift, and go to state 45
    '('        shift, and go to state 46

    assignmentValue  go to state 92
    expression       go to state 48


state 65

   10 assignment: VARIABLE '=' VARIABLE '(' . parameters ')'

    INTEGER    shift, and go to state 38
    FLOATING   shift, and go to state 39
    BOOLEAN    shift, and go to state 40
    CHAR       shift, and go to state 41
    CHARARRAY  shift, and go to state 42
    VARIABLE   shift, and go to state 49
    '-'        shift, and go to state 44
    '~'        shift, and go to state 45
    '('        shift, and go to state 46

    $default  reduce using rule 34 (parameters)

    assignmentValue  go to state 50
    parametersList   go to state 51
    parameters       go to state 93
    expression       go to state 48


state 66

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression
   54           | '-' expression .

    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 54 (expression)


state 67

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression
   53           | '~' expression .

    $default  reduce using rule 53 (expression)


state 68

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression
   55           | '(' expression . ')'

    GE   shift, and go to state 69
    LE   shift, and go to state 70
    EQ   shift, and go to state 71
    NE   shift, and go to state 72
    '|'  shift, and go to state 73
    '&'  shift, and go to state 74
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    ')'  shift, and go to state 94


state 69

   44 expression: expression GE . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 95


state 70

   43 expression: expression LE . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 96


state 71

   45 expression: expression EQ . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 97


state 72

   46 expression: expression NE . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 98


state 73

   47 expression: expression '|' . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 99


state 74

   48 expression: expression '&' . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 100


state 75

   41 expression: expression '<' . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 101


state 76

   42 expression: expression '>' . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 102


state 77

   49 expression: expression '+' . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 103


state 78

   50 expression: expression '-' . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 104


state 79

   51 expression: expression '*' . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 105


state 80

   52 expression: expression '/' . expression

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 106


state 81

   31 parametersList: assignmentValue ',' . parametersList

    INTEGER    shift, and go to state 38
    FLOATING   shift, and go to state 39
    BOOLEAN    shift, and go to state 40
    CHAR       shift, and go to state 41
    CHARARRAY  shift, and go to state 42
    VARIABLE   shift, and go to state 49
    '-'        shift, and go to state 44
    '~'        shift, and go to state 45
    '('        shift, and go to state 46

    assignmentValue  go to state 50
    parametersList   go to state 107
    expression       go to state 48


state 82

   26 statement: VARIABLE '(' parameters ')' .

    $default  reduce using rule 26 (statement)


state 83

   17 statement: WHILE '(' expression ')' . scope

    '{'  shift, and go to state 15

    scope  go to state 108


state 84

   18 statement: REPEAT scope UNTIL '(' . expression ')'

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 109


state 85

   19 statement: FOR '(' initialization ';' . expression ';' assignment ')' scope

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 110


state 86

   20 statement: SWITCH '(' expression ')' . '{' case '}'

    '{'  shift, and go to state 111


state 87

   22 statement: IF '(' expression ')' . THEN scope
   23          | IF '(' expression ')' . THEN scope ELSE scope

    THEN  shift, and go to state 112


state 88

   25 statement: FUNCTION VOID VARIABLE '(' . arguments ')' funcScopeVoid

    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12

    $default  reduce using rule 30 (arguments)

    argumentsList  go to state 113
    arguments      go to state 114
    datatype       go to state 115


state 89

   24 statement: FUNCTION datatype VARIABLE '(' . arguments ')' funcScopeValue

    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12

    $default  reduce using rule 30 (arguments)

    argumentsList  go to state 113
    arguments      go to state 116
    datatype       go to state 115


state 90

    6 declaration: CONST datatype VARIABLE '=' . assignmentValue
    8            | CONST datatype VARIABLE '=' . VARIABLE '(' parameters ')'

    INTEGER    shift, and go to state 38
    FLOATING   shift, and go to state 39
    BOOLEAN    shift, and go to state 40
    CHAR       shift, and go to state 41
    CHARARRAY  shift, and go to state 42
    VARIABLE   shift, and go to state 117
    '-'        shift, and go to state 44
    '~'        shift, and go to state 45
    '('        shift, and go to state 46

    assignmentValue  go to state 118
    expression       go to state 48


state 91

    7 declaration: datatype VARIABLE '=' VARIABLE . '(' parameters ')'
   40 expression: VARIABLE .

    '('  shift, and go to state 119

    $default  reduce using rule 40 (expression)


state 92

    5 declaration: datatype VARIABLE '=' assignmentValue .

    $default  reduce using rule 5 (declaration)


state 93

   10 assignment: VARIABLE '=' VARIABLE '(' parameters . ')'

    ')'  shift, and go to state 120


state 94

   55 expression: '(' expression ')' .

    $default  reduce using rule 55 (expression)


state 95

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   44           | expression GE expression .
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 44 (expression)


state 96

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   43           | expression LE expression .
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 43 (expression)


state 97

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   45           | expression EQ expression .
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 45 (expression)


state 98

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   46           | expression NE expression .
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 46 (expression)


state 99

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   47           | expression '|' expression .
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    GE   shift, and go to state 69
    LE   shift, and go to state 70
    EQ   shift, and go to state 71
    NE   shift, and go to state 72
    '&'  shift, and go to state 74
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 47 (expression)


state 100

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   48           | expression '&' expression .
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    GE   shift, and go to state 69
    LE   shift, and go to state 70
    EQ   shift, and go to state 71
    NE   shift, and go to state 72
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 48 (expression)


state 101

   41 expression: expression . '<' expression
   41           | expression '<' expression .
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 41 (expression)


state 102

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   42           | expression '>' expression .
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 42 (expression)


state 103

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   49           | expression '+' expression .
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 49 (expression)


state 104

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   50           | expression '-' expression .
   51           | expression . '*' expression
   52           | expression . '/' expression

    '*'  shift, and go to state 79
    '/'  shift, and go to state 80

    $default  reduce using rule 50 (expression)


state 105

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   51           | expression '*' expression .
   52           | expression . '/' expression

    $default  reduce using rule 51 (expression)


state 106

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression
   52           | expression '/' expression .

    $default  reduce using rule 52 (expression)


state 107

   31 parametersList: assignmentValue ',' parametersList .

    $default  reduce using rule 31 (parametersList)


state 108

   17 statement: WHILE '(' expression ')' scope .

    $default  reduce using rule 17 (statement)


state 109

   18 statement: REPEAT scope UNTIL '(' expression . ')'
   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    GE   shift, and go to state 69
    LE   shift, and go to state 70
    EQ   shift, and go to state 71
    NE   shift, and go to state 72
    '|'  shift, and go to state 73
    '&'  shift, and go to state 74
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    ')'  shift, and go to state 121


state 110

   19 statement: FOR '(' initialization ';' expression . ';' assignment ')' scope
   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    GE   shift, and go to state 69
    LE   shift, and go to state 70
    EQ   shift, and go to state 71
    NE   shift, and go to state 72
    '|'  shift, and go to state 73
    '&'  shift, and go to state 74
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    ';'  shift, and go to state 122


state 111

   20 statement: SWITCH '(' expression ')' '{' . case '}'

    CASE  shift, and go to state 123

    case  go to state 124


state 112

   22 statement: IF '(' expression ')' THEN . scope
   23          | IF '(' expression ')' THEN . scope ELSE scope

    '{'  shift, and go to state 15

    scope  go to state 125


state 113

   29 arguments: argumentsList .

    $default  reduce using rule 29 (arguments)


state 114

   25 statement: FUNCTION VOID VARIABLE '(' arguments . ')' funcScopeVoid

    ')'  shift, and go to state 126


state 115

   27 argumentsList: datatype . VARIABLE
   28              | datatype . VARIABLE ',' argumentsList

    VARIABLE  shift, and go to state 127


state 116

   24 statement: FUNCTION datatype VARIABLE '(' arguments . ')' funcScopeValue

    ')'  shift, and go to state 128


state 117

    8 declaration: CONST datatype VARIABLE '=' VARIABLE . '(' parameters ')'
   40 expression: VARIABLE .

    '('  shift, and go to state 129

    $default  reduce using rule 40 (expression)


state 118

    6 declaration: CONST datatype VARIABLE '=' assignmentValue .

    $default  reduce using rule 6 (declaration)


state 119

    7 declaration: datatype VARIABLE '=' VARIABLE '(' . parameters ')'

    INTEGER    shift, and go to state 38
    FLOATING   shift, and go to state 39
    BOOLEAN    shift, and go to state 40
    CHAR       shift, and go to state 41
    CHARARRAY  shift, and go to state 42
    VARIABLE   shift, and go to state 49
    '-'        shift, and go to state 44
    '~'        shift, and go to state 45
    '('        shift, and go to state 46

    $default  reduce using rule 34 (parameters)

    assignmentValue  go to state 50
    parametersList   go to state 51
    parameters       go to state 130
    expression       go to state 48


state 120

   10 assignment: VARIABLE '=' VARIABLE '(' parameters ')' .

    $default  reduce using rule 10 (assignment)


state 121

   18 statement: REPEAT scope UNTIL '(' expression ')' .

    $default  reduce using rule 18 (statement)


state 122

   19 statement: FOR '(' initialization ';' expression ';' . assignment ')' scope

    VARIABLE  shift, and go to state 55

    assignment  go to state 131


state 123

   35 case: CASE . expression ':' scope
   36     | CASE . expression ':' scope case

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 132


state 124

   20 statement: SWITCH '(' expression ')' '{' case . '}'

    '}'  shift, and go to state 133


state 125

   22 statement: IF '(' expression ')' THEN scope .
   23          | IF '(' expression ')' THEN scope . ELSE scope

    ELSE  shift, and go to state 134

    $default  reduce using rule 22 (statement)


state 126

   25 statement: FUNCTION VOID VARIABLE '(' arguments ')' . funcScopeVoid

    '{'  shift, and go to state 135

    scope          go to state 136
    funcScopeVoid  go to state 137


state 127

   27 argumentsList: datatype VARIABLE .
   28              | datatype VARIABLE . ',' argumentsList

    ','  shift, and go to state 138

    $default  reduce using rule 27 (argumentsList)


state 128

   24 statement: FUNCTION datatype VARIABLE '(' arguments ')' . funcScopeValue

    '{'  shift, and go to state 139

    funcScopeValue  go to state 140


state 129

    8 declaration: CONST datatype VARIABLE '=' VARIABLE '(' . parameters ')'

    INTEGER    shift, and go to state 38
    FLOATING   shift, and go to state 39
    BOOLEAN    shift, and go to state 40
    CHAR       shift, and go to state 41
    CHARARRAY  shift, and go to state 42
    VARIABLE   shift, and go to state 49
    '-'        shift, and go to state 44
    '~'        shift, and go to state 45
    '('        shift, and go to state 46

    $default  reduce using rule 34 (parameters)

    assignmentValue  go to state 50
    parametersList   go to state 51
    parameters       go to state 141
    expression       go to state 48


state 130

    7 declaration: datatype VARIABLE '=' VARIABLE '(' parameters . ')'

    ')'  shift, and go to state 142


state 131

   19 statement: FOR '(' initialization ';' expression ';' assignment . ')' scope

    ')'  shift, and go to state 143


state 132

   35 case: CASE expression . ':' scope
   36     | CASE expression . ':' scope case
   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression

    GE   shift, and go to state 69
    LE   shift, and go to state 70
    EQ   shift, and go to state 71
    NE   shift, and go to state 72
    '|'  shift, and go to state 73
    '&'  shift, and go to state 74
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    ':'  shift, and go to state 144


state 133

   20 statement: SWITCH '(' expression ')' '{' case '}' .

    $default  reduce using rule 20 (statement)


state 134

   23 statement: IF '(' expression ')' THEN scope ELSE . scope

    '{'  shift, and go to state 15

    scope  go to state 145


state 135

   61 scope: '{' . program '}'
   63 funcScopeVoid: '{' . program returnVoid program '}'

    VARIABLE   shift, and go to state 1
    WHILE      shift, and go to state 2
    REPEAT     shift, and go to state 3
    FOR        shift, and go to state 4
    SWITCH     shift, and go to state 5
    IF         shift, and go to state 6
    FUNCTION   shift, and go to state 7
    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12
    CONST      shift, and go to state 13
    ';'        shift, and go to state 14
    '{'        shift, and go to state 15

    $default  reduce using rule 2 (program)

    program         go to state 146
    declaration     go to state 17
    assignment      go to state 18
    initialization  go to state 19
    statement       go to state 20
    datatype        go to state 21
    scope           go to state 22


state 136

   64 funcScopeVoid: scope .

    $default  reduce using rule 64 (funcScopeVoid)


state 137

   25 statement: FUNCTION VOID VARIABLE '(' arguments ')' funcScopeVoid .

    $default  reduce using rule 25 (statement)


state 138

   28 argumentsList: datatype VARIABLE ',' . argumentsList

    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12

    argumentsList  go to state 147
    datatype       go to state 115


state 139

   62 funcScopeValue: '{' . program returnValue program '}'

    VARIABLE   shift, and go to state 1
    WHILE      shift, and go to state 2
    REPEAT     shift, and go to state 3
    FOR        shift, and go to state 4
    SWITCH     shift, and go to state 5
    IF         shift, and go to state 6
    FUNCTION   shift, and go to state 7
    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12
    CONST      shift, and go to state 13
    ';'        shift, and go to state 14
    '{'        shift, and go to state 15

    $default  reduce using rule 2 (program)

    program         go to state 148
    declaration     go to state 17
    assignment      go to state 18
    initialization  go to state 19
    statement       go to state 20
    datatype        go to state 21
    scope           go to state 22


state 140

   24 statement: FUNCTION datatype VARIABLE '(' arguments ')' funcScopeValue .

    $default  reduce using rule 24 (statement)


state 141

    8 declaration: CONST datatype VARIABLE '=' VARIABLE '(' parameters . ')'

    ')'  shift, and go to state 149


state 142

    7 declaration: datatype VARIABLE '=' VARIABLE '(' parameters ')' .

    $default  reduce using rule 7 (declaration)


state 143

   19 statement: FOR '(' initialization ';' expression ';' assignment ')' . scope

    '{'  shift, and go to state 15

    scope  go to state 150


state 144

   35 case: CASE expression ':' . scope
   36     | CASE expression ':' . scope case

    '{'  shift, and go to state 15

    scope  go to state 151


state 145

   23 statement: IF '(' expression ')' THEN scope ELSE scope .

    $default  reduce using rule 23 (statement)


state 146

   61 scope: '{' program . '}'
   63 funcScopeVoid: '{' program . returnVoid program '}'

    RETURN  shift, and go to state 152
    '}'     shift, and go to state 62

    returnVoid  go to state 153


state 147

   28 argumentsList: datatype VARIABLE ',' argumentsList .

    $default  reduce using rule 28 (argumentsList)


state 148

   62 funcScopeValue: '{' program . returnValue program '}'

    RETURN  shift, and go to state 154

    returnValue  go to state 155


state 149

    8 declaration: CONST datatype VARIABLE '=' VARIABLE '(' parameters ')' .

    $default  reduce using rule 8 (declaration)


state 150

   19 statement: FOR '(' initialization ';' expression ';' assignment ')' scope .

    $default  reduce using rule 19 (statement)


state 151

   35 case: CASE expression ':' scope .
   36     | CASE expression ':' scope . case

    CASE  shift, and go to state 123

    $default  reduce using rule 35 (case)

    case  go to state 156


state 152

   66 returnVoid: RETURN . ';'

    ';'  shift, and go to state 157


state 153

   63 funcScopeVoid: '{' program returnVoid . program '}'

    VARIABLE   shift, and go to state 1
    WHILE      shift, and go to state 2
    REPEAT     shift, and go to state 3
    FOR        shift, and go to state 4
    SWITCH     shift, and go to state 5
    IF         shift, and go to state 6
    FUNCTION   shift, and go to state 7
    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12
    CONST      shift, and go to state 13
    ';'        shift, and go to state 14
    '{'        shift, and go to state 15

    $default  reduce using rule 2 (program)

    program         go to state 158
    declaration     go to state 17
    assignment      go to state 18
    initialization  go to state 19
    statement       go to state 20
    datatype        go to state 21
    scope           go to state 22


state 154

   65 returnValue: RETURN . expression ';'

    INTEGER   shift, and go to state 38
    FLOATING  shift, and go to state 39
    BOOLEAN   shift, and go to state 40
    VARIABLE  shift, and go to state 49
    '-'       shift, and go to state 44
    '~'       shift, and go to state 45
    '('       shift, and go to state 46

    expression  go to state 159


state 155

   62 funcScopeValue: '{' program returnValue . program '}'

    VARIABLE   shift, and go to state 1
    WHILE      shift, and go to state 2
    REPEAT     shift, and go to state 3
    FOR        shift, and go to state 4
    SWITCH     shift, and go to state 5
    IF         shift, and go to state 6
    FUNCTION   shift, and go to state 7
    INT        shift, and go to state 8
    FLOAT      shift, and go to state 9
    CHARACTER  shift, and go to state 10
    STRING     shift, and go to state 11
    BOOL       shift, and go to state 12
    CONST      shift, and go to state 13
    ';'        shift, and go to state 14
    '{'        shift, and go to state 15

    $default  reduce using rule 2 (program)

    program         go to state 160
    declaration     go to state 17
    assignment      go to state 18
    initialization  go to state 19
    statement       go to state 20
    datatype        go to state 21
    scope           go to state 22


state 156

   36 case: CASE expression ':' scope case .

    $default  reduce using rule 36 (case)


state 157

   66 returnVoid: RETURN ';' .

    $default  reduce using rule 66 (returnVoid)


state 158

   63 funcScopeVoid: '{' program returnVoid program . '}'

    '}'  shift, and go to state 161


state 159

   41 expression: expression . '<' expression
   42           | expression . '>' expression
   43           | expression . LE expression
   44           | expression . GE expression
   45           | expression . EQ expression
   46           | expression . NE expression
   47           | expression . '|' expression
   48           | expression . '&' expression
   49           | expression . '+' expression
   50           | expression . '-' expression
   51           | expression . '*' expression
   52           | expression . '/' expression
   65 returnValue: RETURN expression . ';'

    GE   shift, and go to state 69
    LE   shift, and go to state 70
    EQ   shift, and go to state 71
    NE   shift, and go to state 72
    '|'  shift, and go to state 73
    '&'  shift, and go to state 74
    '<'  shift, and go to state 75
    '>'  shift, and go to state 76
    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    ';'  shift, and go to state 162


state 160

   62 funcScopeValue: '{' program returnValue program . '}'

    '}'  shift, and go to state 163


state 161

   63 funcScopeVoid: '{' program returnVoid program '}' .

    $default  reduce using rule 63 (funcScopeVoid)


state 162

   65 returnValue: RETURN expression ';' .

    $default  reduce using rule 65 (returnValue)


state 163

   62 funcScopeValue: '{' program returnValue program '}' .

    $default  reduce using rule 62 (funcScopeValue)
