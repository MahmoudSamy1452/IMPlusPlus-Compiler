digraph Automaton {
  0 [label="0\n$accept -> . program $end"]
  0 -> 1 [style=solid label="VARIABLE"]
  0 -> 2 [style=solid label="WHILE"]
  0 -> 3 [style=solid label="REPEAT"]
  0 -> 4 [style=solid label="FOR"]
  0 -> 5 [style=solid label="SWITCH"]
  0 -> 6 [style=solid label="IF"]
  0 -> 7 [style=solid label="FUNCTION"]
  0 -> 8 [style=solid label="INT"]
  0 -> 9 [style=solid label="FLOAT"]
  0 -> 10 [style=solid label="CHARACTER"]
  0 -> 11 [style=solid label="STRING"]
  0 -> 12 [style=solid label="BOOL"]
  0 -> 13 [style=solid label="CONST"]
  0 -> 14 [style=solid label="';'"]
  0 -> 15 [style=solid label="'{'"]
  0 -> 16 [style=dashed label="program"]
  0 -> 17 [style=dashed label="declaration"]
  0 -> 18 [style=dashed label="assignment"]
  0 -> 19 [style=dashed label="initialization"]
  0 -> 20 [style=dashed label="statement"]
  0 -> 21 [style=dashed label="datatype"]
  0 -> 22 [style=dashed label="scope"]
  1 [label="1\nassignment -> VARIABLE . '=' assignmentValue\nassignment -> VARIABLE . '=' VARIABLE '(' parameters ')'\nstatement -> VARIABLE . '(' parameters ')'"]
  1 -> 23 [style=solid label="'='"]
  1 -> 24 [style=solid label="'('"]
  2 [label="2\nstatement -> WHILE . '(' expression ')' scope"]
  2 -> 25 [style=solid label="'('"]
  3 [label="3\nstatement -> REPEAT . scope UNTIL '(' expression ')'"]
  3 -> 15 [style=solid label="'{'"]
  3 -> 26 [style=dashed label="scope"]
  4 [label="4\nstatement -> FOR . '(' initialization ';' expression ';' assignment ')' scope"]
  4 -> 27 [style=solid label="'('"]
  5 [label="5\nstatement -> SWITCH . '(' expression ')' '{' case '}'"]
  5 -> 28 [style=solid label="'('"]
  6 [label="6\nstatement -> IF . '(' expression ')' THEN scope\nstatement -> IF . '(' expression ')' THEN scope ELSE scope"]
  6 -> 29 [style=solid label="'('"]
  7 [label="7\nstatement -> FUNCTION . datatype VARIABLE '(' arguments ')' funcScopeValue\nstatement -> FUNCTION . VOID VARIABLE '(' arguments ')' funcScopeVoid"]
  7 -> 8 [style=solid label="INT"]
  7 -> 9 [style=solid label="FLOAT"]
  7 -> 10 [style=solid label="CHARACTER"]
  7 -> 11 [style=solid label="STRING"]
  7 -> 12 [style=solid label="BOOL"]
  7 -> 30 [style=solid label="VOID"]
  7 -> 31 [style=dashed label="datatype"]
  8 [label="8\ndatatype -> INT ."]
  9 [label="9\ndatatype -> FLOAT ."]
  10 [label="10\ndatatype -> CHARACTER ."]
  11 [label="11\ndatatype -> STRING ."]
  12 [label="12\ndatatype -> BOOL ."]
  13 [label="13\ndeclaration -> CONST . datatype VARIABLE '=' assignmentValue\ndeclaration -> CONST . datatype VARIABLE '=' VARIABLE '(' parameters ')'"]
  13 -> 8 [style=solid label="INT"]
  13 -> 9 [style=solid label="FLOAT"]
  13 -> 10 [style=solid label="CHARACTER"]
  13 -> 11 [style=solid label="STRING"]
  13 -> 12 [style=solid label="BOOL"]
  13 -> 32 [style=dashed label="datatype"]
  14 [label="14\nprogram -> ';' . program"]
  14 -> 1 [style=solid label="VARIABLE"]
  14 -> 2 [style=solid label="WHILE"]
  14 -> 3 [style=solid label="REPEAT"]
  14 -> 4 [style=solid label="FOR"]
  14 -> 5 [style=solid label="SWITCH"]
  14 -> 6 [style=solid label="IF"]
  14 -> 7 [style=solid label="FUNCTION"]
  14 -> 8 [style=solid label="INT"]
  14 -> 9 [style=solid label="FLOAT"]
  14 -> 10 [style=solid label="CHARACTER"]
  14 -> 11 [style=solid label="STRING"]
  14 -> 12 [style=solid label="BOOL"]
  14 -> 13 [style=solid label="CONST"]
  14 -> 14 [style=solid label="';'"]
  14 -> 15 [style=solid label="'{'"]
  14 -> 33 [style=dashed label="program"]
  14 -> 17 [style=dashed label="declaration"]
  14 -> 18 [style=dashed label="assignment"]
  14 -> 19 [style=dashed label="initialization"]
  14 -> 20 [style=dashed label="statement"]
  14 -> 21 [style=dashed label="datatype"]
  14 -> 22 [style=dashed label="scope"]
  15 [label="15\nscope -> '{' . program '}'"]
  15 -> 1 [style=solid label="VARIABLE"]
  15 -> 2 [style=solid label="WHILE"]
  15 -> 3 [style=solid label="REPEAT"]
  15 -> 4 [style=solid label="FOR"]
  15 -> 5 [style=solid label="SWITCH"]
  15 -> 6 [style=solid label="IF"]
  15 -> 7 [style=solid label="FUNCTION"]
  15 -> 8 [style=solid label="INT"]
  15 -> 9 [style=solid label="FLOAT"]
  15 -> 10 [style=solid label="CHARACTER"]
  15 -> 11 [style=solid label="STRING"]
  15 -> 12 [style=solid label="BOOL"]
  15 -> 13 [style=solid label="CONST"]
  15 -> 14 [style=solid label="';'"]
  15 -> 15 [style=solid label="'{'"]
  15 -> 34 [style=dashed label="program"]
  15 -> 17 [style=dashed label="declaration"]
  15 -> 18 [style=dashed label="assignment"]
  15 -> 19 [style=dashed label="initialization"]
  15 -> 20 [style=dashed label="statement"]
  15 -> 21 [style=dashed label="datatype"]
  15 -> 22 [style=dashed label="scope"]
  16 [label="16\n$accept -> program . $end"]
  16 -> 35 [style=solid label="$end"]
  17 [label="17\ninitialization -> declaration ."]
  18 [label="18\ninitialization -> assignment ."]
  19 [label="19\nstatement -> initialization ."]
  20 [label="20\nprogram -> statement . ';' program"]
  20 -> 36 [style=solid label="';'"]
  21 [label="21\ndeclaration -> datatype . VARIABLE\ndeclaration -> datatype . VARIABLE '=' assignmentValue\ndeclaration -> datatype . VARIABLE '=' VARIABLE '(' parameters ')'"]
  21 -> 37 [style=solid label="VARIABLE"]
  22 [label="22\nstatement -> scope ."]
  23 [label="23\nassignment -> VARIABLE '=' . assignmentValue\nassignment -> VARIABLE '=' . VARIABLE '(' parameters ')'"]
  23 -> 38 [style=solid label="INTEGER"]
  23 -> 39 [style=solid label="FLOATING"]
  23 -> 40 [style=solid label="BOOLEAN"]
  23 -> 41 [style=solid label="CHAR"]
  23 -> 42 [style=solid label="CHARARRAY"]
  23 -> 43 [style=solid label="VARIABLE"]
  23 -> 44 [style=solid label="'-'"]
  23 -> 45 [style=solid label="'~'"]
  23 -> 46 [style=solid label="'('"]
  23 -> 47 [style=dashed label="assignmentValue"]
  23 -> 48 [style=dashed label="expression"]
  24 [label="24\nstatement -> VARIABLE '(' . parameters ')'"]
  24 -> 38 [style=solid label="INTEGER"]
  24 -> 39 [style=solid label="FLOATING"]
  24 -> 40 [style=solid label="BOOLEAN"]
  24 -> 41 [style=solid label="CHAR"]
  24 -> 42 [style=solid label="CHARARRAY"]
  24 -> 49 [style=solid label="VARIABLE"]
  24 -> 44 [style=solid label="'-'"]
  24 -> 45 [style=solid label="'~'"]
  24 -> 46 [style=solid label="'('"]
  24 -> 50 [style=dashed label="assignmentValue"]
  24 -> 51 [style=dashed label="parametersList"]
  24 -> 52 [style=dashed label="parameters"]
  24 -> 48 [style=dashed label="expression"]
  25 [label="25\nstatement -> WHILE '(' . expression ')' scope"]
  25 -> 38 [style=solid label="INTEGER"]
  25 -> 39 [style=solid label="FLOATING"]
  25 -> 40 [style=solid label="BOOLEAN"]
  25 -> 49 [style=solid label="VARIABLE"]
  25 -> 44 [style=solid label="'-'"]
  25 -> 45 [style=solid label="'~'"]
  25 -> 46 [style=solid label="'('"]
  25 -> 53 [style=dashed label="expression"]
  26 [label="26\nstatement -> REPEAT scope . UNTIL '(' expression ')'"]
  26 -> 54 [style=solid label="UNTIL"]
  27 [label="27\nstatement -> FOR '(' . initialization ';' expression ';' assignment ')' scope"]
  27 -> 55 [style=solid label="VARIABLE"]
  27 -> 8 [style=solid label="INT"]
  27 -> 9 [style=solid label="FLOAT"]
  27 -> 10 [style=solid label="CHARACTER"]
  27 -> 11 [style=solid label="STRING"]
  27 -> 12 [style=solid label="BOOL"]
  27 -> 13 [style=solid label="CONST"]
  27 -> 17 [style=dashed label="declaration"]
  27 -> 18 [style=dashed label="assignment"]
  27 -> 56 [style=dashed label="initialization"]
  27 -> 21 [style=dashed label="datatype"]
  28 [label="28\nstatement -> SWITCH '(' . expression ')' '{' case '}'"]
  28 -> 38 [style=solid label="INTEGER"]
  28 -> 39 [style=solid label="FLOATING"]
  28 -> 40 [style=solid label="BOOLEAN"]
  28 -> 49 [style=solid label="VARIABLE"]
  28 -> 44 [style=solid label="'-'"]
  28 -> 45 [style=solid label="'~'"]
  28 -> 46 [style=solid label="'('"]
  28 -> 57 [style=dashed label="expression"]
  29 [label="29\nstatement -> IF '(' . expression ')' THEN scope\nstatement -> IF '(' . expression ')' THEN scope ELSE scope"]
  29 -> 38 [style=solid label="INTEGER"]
  29 -> 39 [style=solid label="FLOATING"]
  29 -> 40 [style=solid label="BOOLEAN"]
  29 -> 49 [style=solid label="VARIABLE"]
  29 -> 44 [style=solid label="'-'"]
  29 -> 45 [style=solid label="'~'"]
  29 -> 46 [style=solid label="'('"]
  29 -> 58 [style=dashed label="expression"]
  30 [label="30\nstatement -> FUNCTION VOID . VARIABLE '(' arguments ')' funcScopeVoid"]
  30 -> 59 [style=solid label="VARIABLE"]
  31 [label="31\nstatement -> FUNCTION datatype . VARIABLE '(' arguments ')' funcScopeValue"]
  31 -> 60 [style=solid label="VARIABLE"]
  32 [label="32\ndeclaration -> CONST datatype . VARIABLE '=' assignmentValue\ndeclaration -> CONST datatype . VARIABLE '=' VARIABLE '(' parameters ')'"]
  32 -> 61 [style=solid label="VARIABLE"]
  33 [label="33\nprogram -> ';' program ."]
  34 [label="34\nscope -> '{' program . '}'"]
  34 -> 62 [style=solid label="'}'"]
  35 [label="35\n$accept -> program $end ."]
  36 [label="36\nprogram -> statement ';' . program"]
  36 -> 1 [style=solid label="VARIABLE"]
  36 -> 2 [style=solid label="WHILE"]
  36 -> 3 [style=solid label="REPEAT"]
  36 -> 4 [style=solid label="FOR"]
  36 -> 5 [style=solid label="SWITCH"]
  36 -> 6 [style=solid label="IF"]
  36 -> 7 [style=solid label="FUNCTION"]
  36 -> 8 [style=solid label="INT"]
  36 -> 9 [style=solid label="FLOAT"]
  36 -> 10 [style=solid label="CHARACTER"]
  36 -> 11 [style=solid label="STRING"]
  36 -> 12 [style=solid label="BOOL"]
  36 -> 13 [style=solid label="CONST"]
  36 -> 14 [style=solid label="';'"]
  36 -> 15 [style=solid label="'{'"]
  36 -> 63 [style=dashed label="program"]
  36 -> 17 [style=dashed label="declaration"]
  36 -> 18 [style=dashed label="assignment"]
  36 -> 19 [style=dashed label="initialization"]
  36 -> 20 [style=dashed label="statement"]
  36 -> 21 [style=dashed label="datatype"]
  36 -> 22 [style=dashed label="scope"]
  37 [label="37\ndeclaration -> datatype VARIABLE .\ndeclaration -> datatype VARIABLE . '=' assignmentValue\ndeclaration -> datatype VARIABLE . '=' VARIABLE '(' parameters ')'"]
  37 -> 64 [style=solid label="'='"]
  38 [label="38\nexpression -> INTEGER ."]
  39 [label="39\nexpression -> FLOATING ."]
  40 [label="40\nexpression -> BOOLEAN ."]
  41 [label="41\nassignmentValue -> CHAR ."]
  42 [label="42\nassignmentValue -> CHARARRAY ."]
  43 [label="43\nassignment -> VARIABLE '=' VARIABLE . '(' parameters ')'\nexpression -> VARIABLE ."]
  43 -> 65 [style=solid label="'('"]
  44 [label="44\nexpression -> '-' . expression"]
  44 -> 38 [style=solid label="INTEGER"]
  44 -> 39 [style=solid label="FLOATING"]
  44 -> 40 [style=solid label="BOOLEAN"]
  44 -> 49 [style=solid label="VARIABLE"]
  44 -> 44 [style=solid label="'-'"]
  44 -> 45 [style=solid label="'~'"]
  44 -> 46 [style=solid label="'('"]
  44 -> 66 [style=dashed label="expression"]
  45 [label="45\nexpression -> '~' . expression"]
  45 -> 38 [style=solid label="INTEGER"]
  45 -> 39 [style=solid label="FLOATING"]
  45 -> 40 [style=solid label="BOOLEAN"]
  45 -> 49 [style=solid label="VARIABLE"]
  45 -> 44 [style=solid label="'-'"]
  45 -> 45 [style=solid label="'~'"]
  45 -> 46 [style=solid label="'('"]
  45 -> 67 [style=dashed label="expression"]
  46 [label="46\nexpression -> '(' . expression ')'"]
  46 -> 38 [style=solid label="INTEGER"]
  46 -> 39 [style=solid label="FLOATING"]
  46 -> 40 [style=solid label="BOOLEAN"]
  46 -> 49 [style=solid label="VARIABLE"]
  46 -> 44 [style=solid label="'-'"]
  46 -> 45 [style=solid label="'~'"]
  46 -> 46 [style=solid label="'('"]
  46 -> 68 [style=dashed label="expression"]
  47 [label="47\nassignment -> VARIABLE '=' assignmentValue ."]
  48 [label="48\nassignmentValue -> expression .\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  48 -> 69 [style=solid label="GE"]
  48 -> 70 [style=solid label="LE"]
  48 -> 71 [style=solid label="EQ"]
  48 -> 72 [style=solid label="NE"]
  48 -> 73 [style=solid label="'|'"]
  48 -> 74 [style=solid label="'&'"]
  48 -> 75 [style=solid label="'<'"]
  48 -> 76 [style=solid label="'>'"]
  48 -> 77 [style=solid label="'+'"]
  48 -> 78 [style=solid label="'-'"]
  48 -> 79 [style=solid label="'*'"]
  48 -> 80 [style=solid label="'/'"]
  49 [label="49\nexpression -> VARIABLE ."]
  50 [label="50\nparametersList -> assignmentValue . ',' parametersList\nparametersList -> assignmentValue ."]
  50 -> 81 [style=solid label="','"]
  51 [label="51\nparameters -> parametersList ."]
  52 [label="52\nstatement -> VARIABLE '(' parameters . ')'"]
  52 -> 82 [style=solid label="')'"]
  53 [label="53\nstatement -> WHILE '(' expression . ')' scope\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  53 -> 69 [style=solid label="GE"]
  53 -> 70 [style=solid label="LE"]
  53 -> 71 [style=solid label="EQ"]
  53 -> 72 [style=solid label="NE"]
  53 -> 73 [style=solid label="'|'"]
  53 -> 74 [style=solid label="'&'"]
  53 -> 75 [style=solid label="'<'"]
  53 -> 76 [style=solid label="'>'"]
  53 -> 77 [style=solid label="'+'"]
  53 -> 78 [style=solid label="'-'"]
  53 -> 79 [style=solid label="'*'"]
  53 -> 80 [style=solid label="'/'"]
  53 -> 83 [style=solid label="')'"]
  54 [label="54\nstatement -> REPEAT scope UNTIL . '(' expression ')'"]
  54 -> 84 [style=solid label="'('"]
  55 [label="55\nassignment -> VARIABLE . '=' assignmentValue\nassignment -> VARIABLE . '=' VARIABLE '(' parameters ')'"]
  55 -> 23 [style=solid label="'='"]
  56 [label="56\nstatement -> FOR '(' initialization . ';' expression ';' assignment ')' scope"]
  56 -> 85 [style=solid label="';'"]
  57 [label="57\nstatement -> SWITCH '(' expression . ')' '{' case '}'\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  57 -> 69 [style=solid label="GE"]
  57 -> 70 [style=solid label="LE"]
  57 -> 71 [style=solid label="EQ"]
  57 -> 72 [style=solid label="NE"]
  57 -> 73 [style=solid label="'|'"]
  57 -> 74 [style=solid label="'&'"]
  57 -> 75 [style=solid label="'<'"]
  57 -> 76 [style=solid label="'>'"]
  57 -> 77 [style=solid label="'+'"]
  57 -> 78 [style=solid label="'-'"]
  57 -> 79 [style=solid label="'*'"]
  57 -> 80 [style=solid label="'/'"]
  57 -> 86 [style=solid label="')'"]
  58 [label="58\nstatement -> IF '(' expression . ')' THEN scope\nstatement -> IF '(' expression . ')' THEN scope ELSE scope\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  58 -> 69 [style=solid label="GE"]
  58 -> 70 [style=solid label="LE"]
  58 -> 71 [style=solid label="EQ"]
  58 -> 72 [style=solid label="NE"]
  58 -> 73 [style=solid label="'|'"]
  58 -> 74 [style=solid label="'&'"]
  58 -> 75 [style=solid label="'<'"]
  58 -> 76 [style=solid label="'>'"]
  58 -> 77 [style=solid label="'+'"]
  58 -> 78 [style=solid label="'-'"]
  58 -> 79 [style=solid label="'*'"]
  58 -> 80 [style=solid label="'/'"]
  58 -> 87 [style=solid label="')'"]
  59 [label="59\nstatement -> FUNCTION VOID VARIABLE . '(' arguments ')' funcScopeVoid"]
  59 -> 88 [style=solid label="'('"]
  60 [label="60\nstatement -> FUNCTION datatype VARIABLE . '(' arguments ')' funcScopeValue"]
  60 -> 89 [style=solid label="'('"]
  61 [label="61\ndeclaration -> CONST datatype VARIABLE . '=' assignmentValue\ndeclaration -> CONST datatype VARIABLE . '=' VARIABLE '(' parameters ')'"]
  61 -> 90 [style=solid label="'='"]
  62 [label="62\nscope -> '{' program '}' ."]
  63 [label="63\nprogram -> statement ';' program ."]
  64 [label="64\ndeclaration -> datatype VARIABLE '=' . assignmentValue\ndeclaration -> datatype VARIABLE '=' . VARIABLE '(' parameters ')'"]
  64 -> 38 [style=solid label="INTEGER"]
  64 -> 39 [style=solid label="FLOATING"]
  64 -> 40 [style=solid label="BOOLEAN"]
  64 -> 41 [style=solid label="CHAR"]
  64 -> 42 [style=solid label="CHARARRAY"]
  64 -> 91 [style=solid label="VARIABLE"]
  64 -> 44 [style=solid label="'-'"]
  64 -> 45 [style=solid label="'~'"]
  64 -> 46 [style=solid label="'('"]
  64 -> 92 [style=dashed label="assignmentValue"]
  64 -> 48 [style=dashed label="expression"]
  65 [label="65\nassignment -> VARIABLE '=' VARIABLE '(' . parameters ')'"]
  65 -> 38 [style=solid label="INTEGER"]
  65 -> 39 [style=solid label="FLOATING"]
  65 -> 40 [style=solid label="BOOLEAN"]
  65 -> 41 [style=solid label="CHAR"]
  65 -> 42 [style=solid label="CHARARRAY"]
  65 -> 49 [style=solid label="VARIABLE"]
  65 -> 44 [style=solid label="'-'"]
  65 -> 45 [style=solid label="'~'"]
  65 -> 46 [style=solid label="'('"]
  65 -> 50 [style=dashed label="assignmentValue"]
  65 -> 51 [style=dashed label="parametersList"]
  65 -> 93 [style=dashed label="parameters"]
  65 -> 48 [style=dashed label="expression"]
  66 [label="66\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression\nexpression -> '-' expression ."]
  66 -> 79 [style=solid label="'*'"]
  66 -> 80 [style=solid label="'/'"]
  67 [label="67\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression\nexpression -> '~' expression ."]
  68 [label="68\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression\nexpression -> '(' expression . ')'"]
  68 -> 69 [style=solid label="GE"]
  68 -> 70 [style=solid label="LE"]
  68 -> 71 [style=solid label="EQ"]
  68 -> 72 [style=solid label="NE"]
  68 -> 73 [style=solid label="'|'"]
  68 -> 74 [style=solid label="'&'"]
  68 -> 75 [style=solid label="'<'"]
  68 -> 76 [style=solid label="'>'"]
  68 -> 77 [style=solid label="'+'"]
  68 -> 78 [style=solid label="'-'"]
  68 -> 79 [style=solid label="'*'"]
  68 -> 80 [style=solid label="'/'"]
  68 -> 94 [style=solid label="')'"]
  69 [label="69\nexpression -> expression GE . expression"]
  69 -> 38 [style=solid label="INTEGER"]
  69 -> 39 [style=solid label="FLOATING"]
  69 -> 40 [style=solid label="BOOLEAN"]
  69 -> 49 [style=solid label="VARIABLE"]
  69 -> 44 [style=solid label="'-'"]
  69 -> 45 [style=solid label="'~'"]
  69 -> 46 [style=solid label="'('"]
  69 -> 95 [style=dashed label="expression"]
  70 [label="70\nexpression -> expression LE . expression"]
  70 -> 38 [style=solid label="INTEGER"]
  70 -> 39 [style=solid label="FLOATING"]
  70 -> 40 [style=solid label="BOOLEAN"]
  70 -> 49 [style=solid label="VARIABLE"]
  70 -> 44 [style=solid label="'-'"]
  70 -> 45 [style=solid label="'~'"]
  70 -> 46 [style=solid label="'('"]
  70 -> 96 [style=dashed label="expression"]
  71 [label="71\nexpression -> expression EQ . expression"]
  71 -> 38 [style=solid label="INTEGER"]
  71 -> 39 [style=solid label="FLOATING"]
  71 -> 40 [style=solid label="BOOLEAN"]
  71 -> 49 [style=solid label="VARIABLE"]
  71 -> 44 [style=solid label="'-'"]
  71 -> 45 [style=solid label="'~'"]
  71 -> 46 [style=solid label="'('"]
  71 -> 97 [style=dashed label="expression"]
  72 [label="72\nexpression -> expression NE . expression"]
  72 -> 38 [style=solid label="INTEGER"]
  72 -> 39 [style=solid label="FLOATING"]
  72 -> 40 [style=solid label="BOOLEAN"]
  72 -> 49 [style=solid label="VARIABLE"]
  72 -> 44 [style=solid label="'-'"]
  72 -> 45 [style=solid label="'~'"]
  72 -> 46 [style=solid label="'('"]
  72 -> 98 [style=dashed label="expression"]
  73 [label="73\nexpression -> expression '|' . expression"]
  73 -> 38 [style=solid label="INTEGER"]
  73 -> 39 [style=solid label="FLOATING"]
  73 -> 40 [style=solid label="BOOLEAN"]
  73 -> 49 [style=solid label="VARIABLE"]
  73 -> 44 [style=solid label="'-'"]
  73 -> 45 [style=solid label="'~'"]
  73 -> 46 [style=solid label="'('"]
  73 -> 99 [style=dashed label="expression"]
  74 [label="74\nexpression -> expression '&' . expression"]
  74 -> 38 [style=solid label="INTEGER"]
  74 -> 39 [style=solid label="FLOATING"]
  74 -> 40 [style=solid label="BOOLEAN"]
  74 -> 49 [style=solid label="VARIABLE"]
  74 -> 44 [style=solid label="'-'"]
  74 -> 45 [style=solid label="'~'"]
  74 -> 46 [style=solid label="'('"]
  74 -> 100 [style=dashed label="expression"]
  75 [label="75\nexpression -> expression '<' . expression"]
  75 -> 38 [style=solid label="INTEGER"]
  75 -> 39 [style=solid label="FLOATING"]
  75 -> 40 [style=solid label="BOOLEAN"]
  75 -> 49 [style=solid label="VARIABLE"]
  75 -> 44 [style=solid label="'-'"]
  75 -> 45 [style=solid label="'~'"]
  75 -> 46 [style=solid label="'('"]
  75 -> 101 [style=dashed label="expression"]
  76 [label="76\nexpression -> expression '>' . expression"]
  76 -> 38 [style=solid label="INTEGER"]
  76 -> 39 [style=solid label="FLOATING"]
  76 -> 40 [style=solid label="BOOLEAN"]
  76 -> 49 [style=solid label="VARIABLE"]
  76 -> 44 [style=solid label="'-'"]
  76 -> 45 [style=solid label="'~'"]
  76 -> 46 [style=solid label="'('"]
  76 -> 102 [style=dashed label="expression"]
  77 [label="77\nexpression -> expression '+' . expression"]
  77 -> 38 [style=solid label="INTEGER"]
  77 -> 39 [style=solid label="FLOATING"]
  77 -> 40 [style=solid label="BOOLEAN"]
  77 -> 49 [style=solid label="VARIABLE"]
  77 -> 44 [style=solid label="'-'"]
  77 -> 45 [style=solid label="'~'"]
  77 -> 46 [style=solid label="'('"]
  77 -> 103 [style=dashed label="expression"]
  78 [label="78\nexpression -> expression '-' . expression"]
  78 -> 38 [style=solid label="INTEGER"]
  78 -> 39 [style=solid label="FLOATING"]
  78 -> 40 [style=solid label="BOOLEAN"]
  78 -> 49 [style=solid label="VARIABLE"]
  78 -> 44 [style=solid label="'-'"]
  78 -> 45 [style=solid label="'~'"]
  78 -> 46 [style=solid label="'('"]
  78 -> 104 [style=dashed label="expression"]
  79 [label="79\nexpression -> expression '*' . expression"]
  79 -> 38 [style=solid label="INTEGER"]
  79 -> 39 [style=solid label="FLOATING"]
  79 -> 40 [style=solid label="BOOLEAN"]
  79 -> 49 [style=solid label="VARIABLE"]
  79 -> 44 [style=solid label="'-'"]
  79 -> 45 [style=solid label="'~'"]
  79 -> 46 [style=solid label="'('"]
  79 -> 105 [style=dashed label="expression"]
  80 [label="80\nexpression -> expression '/' . expression"]
  80 -> 38 [style=solid label="INTEGER"]
  80 -> 39 [style=solid label="FLOATING"]
  80 -> 40 [style=solid label="BOOLEAN"]
  80 -> 49 [style=solid label="VARIABLE"]
  80 -> 44 [style=solid label="'-'"]
  80 -> 45 [style=solid label="'~'"]
  80 -> 46 [style=solid label="'('"]
  80 -> 106 [style=dashed label="expression"]
  81 [label="81\nparametersList -> assignmentValue ',' . parametersList"]
  81 -> 38 [style=solid label="INTEGER"]
  81 -> 39 [style=solid label="FLOATING"]
  81 -> 40 [style=solid label="BOOLEAN"]
  81 -> 41 [style=solid label="CHAR"]
  81 -> 42 [style=solid label="CHARARRAY"]
  81 -> 49 [style=solid label="VARIABLE"]
  81 -> 44 [style=solid label="'-'"]
  81 -> 45 [style=solid label="'~'"]
  81 -> 46 [style=solid label="'('"]
  81 -> 50 [style=dashed label="assignmentValue"]
  81 -> 107 [style=dashed label="parametersList"]
  81 -> 48 [style=dashed label="expression"]
  82 [label="82\nstatement -> VARIABLE '(' parameters ')' ."]
  83 [label="83\nstatement -> WHILE '(' expression ')' . scope"]
  83 -> 15 [style=solid label="'{'"]
  83 -> 108 [style=dashed label="scope"]
  84 [label="84\nstatement -> REPEAT scope UNTIL '(' . expression ')'"]
  84 -> 38 [style=solid label="INTEGER"]
  84 -> 39 [style=solid label="FLOATING"]
  84 -> 40 [style=solid label="BOOLEAN"]
  84 -> 49 [style=solid label="VARIABLE"]
  84 -> 44 [style=solid label="'-'"]
  84 -> 45 [style=solid label="'~'"]
  84 -> 46 [style=solid label="'('"]
  84 -> 109 [style=dashed label="expression"]
  85 [label="85\nstatement -> FOR '(' initialization ';' . expression ';' assignment ')' scope"]
  85 -> 38 [style=solid label="INTEGER"]
  85 -> 39 [style=solid label="FLOATING"]
  85 -> 40 [style=solid label="BOOLEAN"]
  85 -> 49 [style=solid label="VARIABLE"]
  85 -> 44 [style=solid label="'-'"]
  85 -> 45 [style=solid label="'~'"]
  85 -> 46 [style=solid label="'('"]
  85 -> 110 [style=dashed label="expression"]
  86 [label="86\nstatement -> SWITCH '(' expression ')' . '{' case '}'"]
  86 -> 111 [style=solid label="'{'"]
  87 [label="87\nstatement -> IF '(' expression ')' . THEN scope\nstatement -> IF '(' expression ')' . THEN scope ELSE scope"]
  87 -> 112 [style=solid label="THEN"]
  88 [label="88\nstatement -> FUNCTION VOID VARIABLE '(' . arguments ')' funcScopeVoid"]
  88 -> 8 [style=solid label="INT"]
  88 -> 9 [style=solid label="FLOAT"]
  88 -> 10 [style=solid label="CHARACTER"]
  88 -> 11 [style=solid label="STRING"]
  88 -> 12 [style=solid label="BOOL"]
  88 -> 113 [style=dashed label="argumentsList"]
  88 -> 114 [style=dashed label="arguments"]
  88 -> 115 [style=dashed label="datatype"]
  89 [label="89\nstatement -> FUNCTION datatype VARIABLE '(' . arguments ')' funcScopeValue"]
  89 -> 8 [style=solid label="INT"]
  89 -> 9 [style=solid label="FLOAT"]
  89 -> 10 [style=solid label="CHARACTER"]
  89 -> 11 [style=solid label="STRING"]
  89 -> 12 [style=solid label="BOOL"]
  89 -> 113 [style=dashed label="argumentsList"]
  89 -> 116 [style=dashed label="arguments"]
  89 -> 115 [style=dashed label="datatype"]
  90 [label="90\ndeclaration -> CONST datatype VARIABLE '=' . assignmentValue\ndeclaration -> CONST datatype VARIABLE '=' . VARIABLE '(' parameters ')'"]
  90 -> 38 [style=solid label="INTEGER"]
  90 -> 39 [style=solid label="FLOATING"]
  90 -> 40 [style=solid label="BOOLEAN"]
  90 -> 41 [style=solid label="CHAR"]
  90 -> 42 [style=solid label="CHARARRAY"]
  90 -> 117 [style=solid label="VARIABLE"]
  90 -> 44 [style=solid label="'-'"]
  90 -> 45 [style=solid label="'~'"]
  90 -> 46 [style=solid label="'('"]
  90 -> 118 [style=dashed label="assignmentValue"]
  90 -> 48 [style=dashed label="expression"]
  91 [label="91\ndeclaration -> datatype VARIABLE '=' VARIABLE . '(' parameters ')'\nexpression -> VARIABLE ."]
  91 -> 119 [style=solid label="'('"]
  92 [label="92\ndeclaration -> datatype VARIABLE '=' assignmentValue ."]
  93 [label="93\nassignment -> VARIABLE '=' VARIABLE '(' parameters . ')'"]
  93 -> 120 [style=solid label="')'"]
  94 [label="94\nexpression -> '(' expression ')' ."]
  95 [label="95\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression GE expression .\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  95 -> 77 [style=solid label="'+'"]
  95 -> 78 [style=solid label="'-'"]
  95 -> 79 [style=solid label="'*'"]
  95 -> 80 [style=solid label="'/'"]
  96 [label="96\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression LE expression .\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  96 -> 77 [style=solid label="'+'"]
  96 -> 78 [style=solid label="'-'"]
  96 -> 79 [style=solid label="'*'"]
  96 -> 80 [style=solid label="'/'"]
  97 [label="97\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression EQ expression .\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  97 -> 77 [style=solid label="'+'"]
  97 -> 78 [style=solid label="'-'"]
  97 -> 79 [style=solid label="'*'"]
  97 -> 80 [style=solid label="'/'"]
  98 [label="98\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression NE expression .\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  98 -> 77 [style=solid label="'+'"]
  98 -> 78 [style=solid label="'-'"]
  98 -> 79 [style=solid label="'*'"]
  98 -> 80 [style=solid label="'/'"]
  99 [label="99\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression '|' expression .\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  99 -> 69 [style=solid label="GE"]
  99 -> 70 [style=solid label="LE"]
  99 -> 71 [style=solid label="EQ"]
  99 -> 72 [style=solid label="NE"]
  99 -> 74 [style=solid label="'&'"]
  99 -> 75 [style=solid label="'<'"]
  99 -> 76 [style=solid label="'>'"]
  99 -> 77 [style=solid label="'+'"]
  99 -> 78 [style=solid label="'-'"]
  99 -> 79 [style=solid label="'*'"]
  99 -> 80 [style=solid label="'/'"]
  100 [label="100\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression '&' expression .\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  100 -> 69 [style=solid label="GE"]
  100 -> 70 [style=solid label="LE"]
  100 -> 71 [style=solid label="EQ"]
  100 -> 72 [style=solid label="NE"]
  100 -> 75 [style=solid label="'<'"]
  100 -> 76 [style=solid label="'>'"]
  100 -> 77 [style=solid label="'+'"]
  100 -> 78 [style=solid label="'-'"]
  100 -> 79 [style=solid label="'*'"]
  100 -> 80 [style=solid label="'/'"]
  101 [label="101\nexpression -> expression . '<' expression\nexpression -> expression '<' expression .\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  101 -> 77 [style=solid label="'+'"]
  101 -> 78 [style=solid label="'-'"]
  101 -> 79 [style=solid label="'*'"]
  101 -> 80 [style=solid label="'/'"]
  102 [label="102\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression '>' expression .\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  102 -> 77 [style=solid label="'+'"]
  102 -> 78 [style=solid label="'-'"]
  102 -> 79 [style=solid label="'*'"]
  102 -> 80 [style=solid label="'/'"]
  103 [label="103\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression '+' expression .\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  103 -> 79 [style=solid label="'*'"]
  103 -> 80 [style=solid label="'/'"]
  104 [label="104\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression '-' expression .\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  104 -> 79 [style=solid label="'*'"]
  104 -> 80 [style=solid label="'/'"]
  105 [label="105\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression '*' expression .\nexpression -> expression . '/' expression"]
  106 [label="106\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression\nexpression -> expression '/' expression ."]
  107 [label="107\nparametersList -> assignmentValue ',' parametersList ."]
  108 [label="108\nstatement -> WHILE '(' expression ')' scope ."]
  109 [label="109\nstatement -> REPEAT scope UNTIL '(' expression . ')'\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  109 -> 69 [style=solid label="GE"]
  109 -> 70 [style=solid label="LE"]
  109 -> 71 [style=solid label="EQ"]
  109 -> 72 [style=solid label="NE"]
  109 -> 73 [style=solid label="'|'"]
  109 -> 74 [style=solid label="'&'"]
  109 -> 75 [style=solid label="'<'"]
  109 -> 76 [style=solid label="'>'"]
  109 -> 77 [style=solid label="'+'"]
  109 -> 78 [style=solid label="'-'"]
  109 -> 79 [style=solid label="'*'"]
  109 -> 80 [style=solid label="'/'"]
  109 -> 121 [style=solid label="')'"]
  110 [label="110\nstatement -> FOR '(' initialization ';' expression . ';' assignment ')' scope\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  110 -> 69 [style=solid label="GE"]
  110 -> 70 [style=solid label="LE"]
  110 -> 71 [style=solid label="EQ"]
  110 -> 72 [style=solid label="NE"]
  110 -> 73 [style=solid label="'|'"]
  110 -> 74 [style=solid label="'&'"]
  110 -> 75 [style=solid label="'<'"]
  110 -> 76 [style=solid label="'>'"]
  110 -> 77 [style=solid label="'+'"]
  110 -> 78 [style=solid label="'-'"]
  110 -> 79 [style=solid label="'*'"]
  110 -> 80 [style=solid label="'/'"]
  110 -> 122 [style=solid label="';'"]
  111 [label="111\nstatement -> SWITCH '(' expression ')' '{' . case '}'"]
  111 -> 123 [style=solid label="CASE"]
  111 -> 124 [style=dashed label="case"]
  112 [label="112\nstatement -> IF '(' expression ')' THEN . scope\nstatement -> IF '(' expression ')' THEN . scope ELSE scope"]
  112 -> 15 [style=solid label="'{'"]
  112 -> 125 [style=dashed label="scope"]
  113 [label="113\narguments -> argumentsList ."]
  114 [label="114\nstatement -> FUNCTION VOID VARIABLE '(' arguments . ')' funcScopeVoid"]
  114 -> 126 [style=solid label="')'"]
  115 [label="115\nargumentsList -> datatype . VARIABLE\nargumentsList -> datatype . VARIABLE ',' argumentsList"]
  115 -> 127 [style=solid label="VARIABLE"]
  116 [label="116\nstatement -> FUNCTION datatype VARIABLE '(' arguments . ')' funcScopeValue"]
  116 -> 128 [style=solid label="')'"]
  117 [label="117\ndeclaration -> CONST datatype VARIABLE '=' VARIABLE . '(' parameters ')'\nexpression -> VARIABLE ."]
  117 -> 129 [style=solid label="'('"]
  118 [label="118\ndeclaration -> CONST datatype VARIABLE '=' assignmentValue ."]
  119 [label="119\ndeclaration -> datatype VARIABLE '=' VARIABLE '(' . parameters ')'"]
  119 -> 38 [style=solid label="INTEGER"]
  119 -> 39 [style=solid label="FLOATING"]
  119 -> 40 [style=solid label="BOOLEAN"]
  119 -> 41 [style=solid label="CHAR"]
  119 -> 42 [style=solid label="CHARARRAY"]
  119 -> 49 [style=solid label="VARIABLE"]
  119 -> 44 [style=solid label="'-'"]
  119 -> 45 [style=solid label="'~'"]
  119 -> 46 [style=solid label="'('"]
  119 -> 50 [style=dashed label="assignmentValue"]
  119 -> 51 [style=dashed label="parametersList"]
  119 -> 130 [style=dashed label="parameters"]
  119 -> 48 [style=dashed label="expression"]
  120 [label="120\nassignment -> VARIABLE '=' VARIABLE '(' parameters ')' ."]
  121 [label="121\nstatement -> REPEAT scope UNTIL '(' expression ')' ."]
  122 [label="122\nstatement -> FOR '(' initialization ';' expression ';' . assignment ')' scope"]
  122 -> 55 [style=solid label="VARIABLE"]
  122 -> 131 [style=dashed label="assignment"]
  123 [label="123\ncase -> CASE . expression ':' scope\ncase -> CASE . expression ':' scope case"]
  123 -> 38 [style=solid label="INTEGER"]
  123 -> 39 [style=solid label="FLOATING"]
  123 -> 40 [style=solid label="BOOLEAN"]
  123 -> 49 [style=solid label="VARIABLE"]
  123 -> 44 [style=solid label="'-'"]
  123 -> 45 [style=solid label="'~'"]
  123 -> 46 [style=solid label="'('"]
  123 -> 132 [style=dashed label="expression"]
  124 [label="124\nstatement -> SWITCH '(' expression ')' '{' case . '}'"]
  124 -> 133 [style=solid label="'}'"]
  125 [label="125\nstatement -> IF '(' expression ')' THEN scope .\nstatement -> IF '(' expression ')' THEN scope . ELSE scope"]
  125 -> 134 [style=solid label="ELSE"]
  126 [label="126\nstatement -> FUNCTION VOID VARIABLE '(' arguments ')' . funcScopeVoid"]
  126 -> 135 [style=solid label="'{'"]
  126 -> 136 [style=dashed label="scope"]
  126 -> 137 [style=dashed label="funcScopeVoid"]
  127 [label="127\nargumentsList -> datatype VARIABLE .\nargumentsList -> datatype VARIABLE . ',' argumentsList"]
  127 -> 138 [style=solid label="','"]
  128 [label="128\nstatement -> FUNCTION datatype VARIABLE '(' arguments ')' . funcScopeValue"]
  128 -> 139 [style=solid label="'{'"]
  128 -> 140 [style=dashed label="funcScopeValue"]
  129 [label="129\ndeclaration -> CONST datatype VARIABLE '=' VARIABLE '(' . parameters ')'"]
  129 -> 38 [style=solid label="INTEGER"]
  129 -> 39 [style=solid label="FLOATING"]
  129 -> 40 [style=solid label="BOOLEAN"]
  129 -> 41 [style=solid label="CHAR"]
  129 -> 42 [style=solid label="CHARARRAY"]
  129 -> 49 [style=solid label="VARIABLE"]
  129 -> 44 [style=solid label="'-'"]
  129 -> 45 [style=solid label="'~'"]
  129 -> 46 [style=solid label="'('"]
  129 -> 50 [style=dashed label="assignmentValue"]
  129 -> 51 [style=dashed label="parametersList"]
  129 -> 141 [style=dashed label="parameters"]
  129 -> 48 [style=dashed label="expression"]
  130 [label="130\ndeclaration -> datatype VARIABLE '=' VARIABLE '(' parameters . ')'"]
  130 -> 142 [style=solid label="')'"]
  131 [label="131\nstatement -> FOR '(' initialization ';' expression ';' assignment . ')' scope"]
  131 -> 143 [style=solid label="')'"]
  132 [label="132\ncase -> CASE expression . ':' scope\ncase -> CASE expression . ':' scope case\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression"]
  132 -> 69 [style=solid label="GE"]
  132 -> 70 [style=solid label="LE"]
  132 -> 71 [style=solid label="EQ"]
  132 -> 72 [style=solid label="NE"]
  132 -> 73 [style=solid label="'|'"]
  132 -> 74 [style=solid label="'&'"]
  132 -> 75 [style=solid label="'<'"]
  132 -> 76 [style=solid label="'>'"]
  132 -> 77 [style=solid label="'+'"]
  132 -> 78 [style=solid label="'-'"]
  132 -> 79 [style=solid label="'*'"]
  132 -> 80 [style=solid label="'/'"]
  132 -> 144 [style=solid label="':'"]
  133 [label="133\nstatement -> SWITCH '(' expression ')' '{' case '}' ."]
  134 [label="134\nstatement -> IF '(' expression ')' THEN scope ELSE . scope"]
  134 -> 15 [style=solid label="'{'"]
  134 -> 145 [style=dashed label="scope"]
  135 [label="135\nscope -> '{' . program '}'\nfuncScopeVoid -> '{' . program returnVoid program '}'"]
  135 -> 1 [style=solid label="VARIABLE"]
  135 -> 2 [style=solid label="WHILE"]
  135 -> 3 [style=solid label="REPEAT"]
  135 -> 4 [style=solid label="FOR"]
  135 -> 5 [style=solid label="SWITCH"]
  135 -> 6 [style=solid label="IF"]
  135 -> 7 [style=solid label="FUNCTION"]
  135 -> 8 [style=solid label="INT"]
  135 -> 9 [style=solid label="FLOAT"]
  135 -> 10 [style=solid label="CHARACTER"]
  135 -> 11 [style=solid label="STRING"]
  135 -> 12 [style=solid label="BOOL"]
  135 -> 13 [style=solid label="CONST"]
  135 -> 14 [style=solid label="';'"]
  135 -> 15 [style=solid label="'{'"]
  135 -> 146 [style=dashed label="program"]
  135 -> 17 [style=dashed label="declaration"]
  135 -> 18 [style=dashed label="assignment"]
  135 -> 19 [style=dashed label="initialization"]
  135 -> 20 [style=dashed label="statement"]
  135 -> 21 [style=dashed label="datatype"]
  135 -> 22 [style=dashed label="scope"]
  136 [label="136\nfuncScopeVoid -> scope ."]
  137 [label="137\nstatement -> FUNCTION VOID VARIABLE '(' arguments ')' funcScopeVoid ."]
  138 [label="138\nargumentsList -> datatype VARIABLE ',' . argumentsList"]
  138 -> 8 [style=solid label="INT"]
  138 -> 9 [style=solid label="FLOAT"]
  138 -> 10 [style=solid label="CHARACTER"]
  138 -> 11 [style=solid label="STRING"]
  138 -> 12 [style=solid label="BOOL"]
  138 -> 147 [style=dashed label="argumentsList"]
  138 -> 115 [style=dashed label="datatype"]
  139 [label="139\nfuncScopeValue -> '{' . program returnValue program '}'"]
  139 -> 1 [style=solid label="VARIABLE"]
  139 -> 2 [style=solid label="WHILE"]
  139 -> 3 [style=solid label="REPEAT"]
  139 -> 4 [style=solid label="FOR"]
  139 -> 5 [style=solid label="SWITCH"]
  139 -> 6 [style=solid label="IF"]
  139 -> 7 [style=solid label="FUNCTION"]
  139 -> 8 [style=solid label="INT"]
  139 -> 9 [style=solid label="FLOAT"]
  139 -> 10 [style=solid label="CHARACTER"]
  139 -> 11 [style=solid label="STRING"]
  139 -> 12 [style=solid label="BOOL"]
  139 -> 13 [style=solid label="CONST"]
  139 -> 14 [style=solid label="';'"]
  139 -> 15 [style=solid label="'{'"]
  139 -> 148 [style=dashed label="program"]
  139 -> 17 [style=dashed label="declaration"]
  139 -> 18 [style=dashed label="assignment"]
  139 -> 19 [style=dashed label="initialization"]
  139 -> 20 [style=dashed label="statement"]
  139 -> 21 [style=dashed label="datatype"]
  139 -> 22 [style=dashed label="scope"]
  140 [label="140\nstatement -> FUNCTION datatype VARIABLE '(' arguments ')' funcScopeValue ."]
  141 [label="141\ndeclaration -> CONST datatype VARIABLE '=' VARIABLE '(' parameters . ')'"]
  141 -> 149 [style=solid label="')'"]
  142 [label="142\ndeclaration -> datatype VARIABLE '=' VARIABLE '(' parameters ')' ."]
  143 [label="143\nstatement -> FOR '(' initialization ';' expression ';' assignment ')' . scope"]
  143 -> 15 [style=solid label="'{'"]
  143 -> 150 [style=dashed label="scope"]
  144 [label="144\ncase -> CASE expression ':' . scope\ncase -> CASE expression ':' . scope case"]
  144 -> 15 [style=solid label="'{'"]
  144 -> 151 [style=dashed label="scope"]
  145 [label="145\nstatement -> IF '(' expression ')' THEN scope ELSE scope ."]
  146 [label="146\nscope -> '{' program . '}'\nfuncScopeVoid -> '{' program . returnVoid program '}'"]
  146 -> 152 [style=solid label="RETURN"]
  146 -> 62 [style=solid label="'}'"]
  146 -> 153 [style=dashed label="returnVoid"]
  147 [label="147\nargumentsList -> datatype VARIABLE ',' argumentsList ."]
  148 [label="148\nfuncScopeValue -> '{' program . returnValue program '}'"]
  148 -> 154 [style=solid label="RETURN"]
  148 -> 155 [style=dashed label="returnValue"]
  149 [label="149\ndeclaration -> CONST datatype VARIABLE '=' VARIABLE '(' parameters ')' ."]
  150 [label="150\nstatement -> FOR '(' initialization ';' expression ';' assignment ')' scope ."]
  151 [label="151\ncase -> CASE expression ':' scope .\ncase -> CASE expression ':' scope . case"]
  151 -> 123 [style=solid label="CASE"]
  151 -> 156 [style=dashed label="case"]
  152 [label="152\nreturnVoid -> RETURN . ';'"]
  152 -> 157 [style=solid label="';'"]
  153 [label="153\nfuncScopeVoid -> '{' program returnVoid . program '}'"]
  153 -> 1 [style=solid label="VARIABLE"]
  153 -> 2 [style=solid label="WHILE"]
  153 -> 3 [style=solid label="REPEAT"]
  153 -> 4 [style=solid label="FOR"]
  153 -> 5 [style=solid label="SWITCH"]
  153 -> 6 [style=solid label="IF"]
  153 -> 7 [style=solid label="FUNCTION"]
  153 -> 8 [style=solid label="INT"]
  153 -> 9 [style=solid label="FLOAT"]
  153 -> 10 [style=solid label="CHARACTER"]
  153 -> 11 [style=solid label="STRING"]
  153 -> 12 [style=solid label="BOOL"]
  153 -> 13 [style=solid label="CONST"]
  153 -> 14 [style=solid label="';'"]
  153 -> 15 [style=solid label="'{'"]
  153 -> 158 [style=dashed label="program"]
  153 -> 17 [style=dashed label="declaration"]
  153 -> 18 [style=dashed label="assignment"]
  153 -> 19 [style=dashed label="initialization"]
  153 -> 20 [style=dashed label="statement"]
  153 -> 21 [style=dashed label="datatype"]
  153 -> 22 [style=dashed label="scope"]
  154 [label="154\nreturnValue -> RETURN . expression ';'"]
  154 -> 38 [style=solid label="INTEGER"]
  154 -> 39 [style=solid label="FLOATING"]
  154 -> 40 [style=solid label="BOOLEAN"]
  154 -> 49 [style=solid label="VARIABLE"]
  154 -> 44 [style=solid label="'-'"]
  154 -> 45 [style=solid label="'~'"]
  154 -> 46 [style=solid label="'('"]
  154 -> 159 [style=dashed label="expression"]
  155 [label="155\nfuncScopeValue -> '{' program returnValue . program '}'"]
  155 -> 1 [style=solid label="VARIABLE"]
  155 -> 2 [style=solid label="WHILE"]
  155 -> 3 [style=solid label="REPEAT"]
  155 -> 4 [style=solid label="FOR"]
  155 -> 5 [style=solid label="SWITCH"]
  155 -> 6 [style=solid label="IF"]
  155 -> 7 [style=solid label="FUNCTION"]
  155 -> 8 [style=solid label="INT"]
  155 -> 9 [style=solid label="FLOAT"]
  155 -> 10 [style=solid label="CHARACTER"]
  155 -> 11 [style=solid label="STRING"]
  155 -> 12 [style=solid label="BOOL"]
  155 -> 13 [style=solid label="CONST"]
  155 -> 14 [style=solid label="';'"]
  155 -> 15 [style=solid label="'{'"]
  155 -> 160 [style=dashed label="program"]
  155 -> 17 [style=dashed label="declaration"]
  155 -> 18 [style=dashed label="assignment"]
  155 -> 19 [style=dashed label="initialization"]
  155 -> 20 [style=dashed label="statement"]
  155 -> 21 [style=dashed label="datatype"]
  155 -> 22 [style=dashed label="scope"]
  156 [label="156\ncase -> CASE expression ':' scope case ."]
  157 [label="157\nreturnVoid -> RETURN ';' ."]
  158 [label="158\nfuncScopeVoid -> '{' program returnVoid program . '}'"]
  158 -> 161 [style=solid label="'}'"]
  159 [label="159\nexpression -> expression . '<' expression\nexpression -> expression . '>' expression\nexpression -> expression . LE expression\nexpression -> expression . GE expression\nexpression -> expression . EQ expression\nexpression -> expression . NE expression\nexpression -> expression . '|' expression\nexpression -> expression . '&' expression\nexpression -> expression . '+' expression\nexpression -> expression . '-' expression\nexpression -> expression . '*' expression\nexpression -> expression . '/' expression\nreturnValue -> RETURN expression . ';'"]
  159 -> 69 [style=solid label="GE"]
  159 -> 70 [style=solid label="LE"]
  159 -> 71 [style=solid label="EQ"]
  159 -> 72 [style=solid label="NE"]
  159 -> 73 [style=solid label="'|'"]
  159 -> 74 [style=solid label="'&'"]
  159 -> 75 [style=solid label="'<'"]
  159 -> 76 [style=solid label="'>'"]
  159 -> 77 [style=solid label="'+'"]
  159 -> 78 [style=solid label="'-'"]
  159 -> 79 [style=solid label="'*'"]
  159 -> 80 [style=solid label="'/'"]
  159 -> 162 [style=solid label="';'"]
  160 [label="160\nfuncScopeValue -> '{' program returnValue program . '}'"]
  160 -> 163 [style=solid label="'}'"]
  161 [label="161\nfuncScopeVoid -> '{' program returnVoid program '}' ."]
  162 [label="162\nreturnValue -> RETURN expression ';' ."]
  163 [label="163\nfuncScopeValue -> '{' program returnValue program '}' ."]
}
